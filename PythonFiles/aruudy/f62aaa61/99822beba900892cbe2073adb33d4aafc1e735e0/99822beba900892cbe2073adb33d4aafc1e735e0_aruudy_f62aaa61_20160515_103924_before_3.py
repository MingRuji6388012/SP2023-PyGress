#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  ardicfilter.py
#  Used to create the database from another which contains only the words vocalised and not vocalized
#  
#  Copyright 2015 Abdelkrime Aries <kariminfo0@gmail.com>
#  
#  ---- AUTHORS ----
#  2015    Abdelkrime Aries <kariminfo0@gmail.com>
#  
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
# 
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#  

import sys
import os
sys.path.insert(0,'../')

import re
from db import litebase
from trans.buckwalter import Buckwalter
from Levenshtein import distance
import pattern


wazns = [
"fulal", 
"faEAlil", 
"mafAEil", 
">afoyAl", 
"faEAlilap", 
"fawAEiyl", 
"fulal", 
"fuwal", 
"faEAlil", 
">afAEiy~", 
"faEAliyl", 
"faEAliyl", 
"fawAEiyl", 
"faE~Alap", 
"faEAliyl", 
"falAEil", 
">afiE~A'", 
"fAEa", 
"faE~uwlap", 
">ufoEiy~ap", 
"faEolaliy~", 
"fuwlap", 
"ful~ap", 
"mifoEal~ap", 
"fulaEolAp", 
"fuEAlap", 
"faEoluwlap", 
"fuwEolAliy~", 
"fuE~Alap", 
"fiyEAlap", 
"fiEoliy~ap", 
"fuEoliy", 
">afal", 
"ma>oEal", 
"fAEiy", 
"faEoyap", 
"faEA}il", 
"faEAliyl", 
"fiyal", 
"mafAEil", 
"mafAEiyl", 
"faEAEil", 
"fuEolaliy~ap", 
"fuEolAliy~ap", 
"fuwEolAliy~ap", 
"faEAlilap", 
"faEAliyl", 
"faEAliyl", 
">afAEilap", 
"fuEaE", 
"faEA}il", 
"faEAliyl", 
"faEAyil", 
"faEA}il", 
"fawAE~", 
"fawAE~", 
"faEAliy~", 
"faEAlilap", 
"faEAliyl", 
"faEAliyl", 
"faEAliy", 
">afoEAE", 
"mafAEil", 
"fiEaE", 
"faEAliy", 
"fiEaEap", 
"mafA}il", 
"faEAlil", 
"|fAl", 
"ma|Eil", 
"fuEAap", 
">afAEiyl", 
">afAEil", 
"faEAyA", 
"faEAlil", 
">afoEAl", 
"fuEal", 
">afAEil", 
"faEA}il", 
"faEAlil", 
">afAEiyl", 
"faEAlilap", 
"faEAliyl", 
"fuE~Al", 
"fuE~Al", 
"faEolAl", 
"mafAlap", 
"mafoEulap", 
"fAEiy", 
"mafoEaY", 
"faEAyil", 
">afoEAl", 
">afoEAE", 
"faEAlil", 
"mafAEil", 
"|fA'", 
"fa>oy", 
"fawAEil", 
"mafAEil", 
"tafAEiyl", 
"mafAEiy", 
"tafAEil", 
"faEAlilap", 
"faEAliyl", 
">afoEilap", 
"faEAliyl", 
"ma|Eil", 
"|EAl", 
"fuEuwl", 
"filAl", 
"faEAliyl", 
"faEAliyl", 
"faEAlilap", 
"ma|lil", 
">afAEil", 
"fuEolAn", 
"faEAliy", 
"fiyEAn", 
"fiEal", 
"fiEal", 
"ma|Eil", 
"mafAEil", 
">afoEiyap", 
">afiE~ap", 
"fawAEiyl", 
"ma|Eil", 
"faEA}il", 
">af~Al", 
"|Eilap", 
"fiEolAn", 
"fawAEil", 
"faEol", 
">afoEAl", 
">afoEul", 
"fuEolAn", 
"fuEuwl", 
"fiEAl", 
">afoEiyap", 
"fAl", 
">afoEAl", 
"fiylAn", 
"fuEAl", 
">afoEilap", 
"fiEolAn", 
"fawAEil", 
"faEuwl", 
">afoEilap", 
"fuEul", 
"faEA}il", 
"fiEolAn", 
">afoEilap", 
"faEA}il", 
"fuEul", 
"fuEolAn", 
">afoEilA'", 
">afoEul", 
"faEiyl", 
"fiEAl", 
"fuEalA'", 
">afil~A'", 
">afil~ap", 
"faEolaY", 
"faEAlaY", 
"fiEAl", 
">afil~ap", 
">afoEilap", 
"|Eiyap", 
">afoEul", 
"fuEolAn", 
"faEA}il", 
"fuEul", 
"faEiyl", 
"faEAl", 
">afoEilap", 
"fiEolAn", 
"fuEalA'", 
"fal~", 
">afoEAl", 
"fuEuwl", 
"faEal", 
"fiEAl", 
">afoEAl", 
"fiEolap", 
"fiEAlap", 
"fuEuwl", 
"fuEolAn", 
"fiEolAn", 
"faEil", 
">afoEAl", 
"faEul", 
">afoEAl", 
"fuEul", 
">afoEAl", 
"|fAl", 
"fuEol", 
">afoEAl", 
"fiEAl", 
"fiEolAn", 
"fiylAn", 
"fuEuwl", 
"fuwl", 
"waEol", 
">afoEAl", 
"mawAEiyl", 
"fiylAn", 
"fiEal", 
">afoEAl", 
"fiEil", 
"|EAl", 
"fiEol", 
"fiE~", 
">afoEAl", 
"fiEalap", 
"fiEAl", 
"fuEuwl", 
">afoEilap", 
">afoEul", 
"fuEal", 
">afoEAl", 
"faEiy~", 
"fiEolap", 
"faEAlA", 
">afoEilA'", 
"fuEol", 
"faEolaY", 
"fiEol", 
"faEiylap", 
"fuEul", 
"faEA}il", 
"fuEalA'", 
"faEAlil", 
"faEAlil", 
"mawAEiyl", 
"mafAE~", 
"mafAEiy", 
"mafAEap", 
"miyEAl", 
"tafaAEiy", 
"fuEayol", 
"mafoEAp", 
"fuE~Al", 
"fAEiyl", 
"faEuwlal", 
"fiE~", 
"mafoEAp", 
"mafaE~", 
"fulaEolAp", 
"fiE~", 
"fiyEAl", 
"faEolAlal", 
">ufoEuwlap", 
"tafAEulap", 
"fiyluEolAliy~", 
"fiyl", 
"fiyEAliyap", 
"fuEolul", 
"mafoEuwliy~ap", 
"faE", 
"faEuwliy~", 
"fuE~iy~ap", 
"mifal~ap", 
"fiyluEolAliy~ap", 
"fAEiliy~ap", 
"mafaE~ap", 
"fiylap", 
"fAE~ap", 
"mafAEil", 
"fuEal", 
"fuEal", 
"mufoEilap", 
"mufiE~ap", 
"fuEalA'", 
"fiEoluwl", 
"faEoliyliy~", 
"fuEolAl", 
"faEaliy~", 
"fuEoliy~", 
">afoEaliy~ap", 
">afaE~iy~ap", 
"fuwEap", 
"fuEolAliy~", 
"faE~ap", 
"mafoEuwlap", 
"faEilap", 
"filaEoliyliy~", 
"faEaliy~ap", 
"fiEap", 
"mufaE~alap", 
"fuEoluwliy~ap", 
"faEoliy~ap", 
"faEiy~ap", 
"fuE~ap", 
"fuE~ap", 
"fiEA'", 
"faEow", 
"fiEA'", 
"fiE~ap", 
"faEap", 
"fuEolap", 
"fuEal", 
"fuEolaY", 
"fuEal", 
"fiEAl", 
"faEolap", 
"fuEaY", 
"fiEAl", 
"fAlap", 
"fawAEil", 
"fiEolap", 
"fiEolaY", 
"fiEal", 
"fiEolAn", 
"fiEaY", 
"fAE", 
"fuEAp", 
"fAEil", 
"fAE~", 
"|Eil", 
"faEalap", 
"fuE~al", 
"faEolaY", 
"fuE~Al", 
"fawAEil", 
"fuEolAn", 
"fuEalA'", 
"fuE~", 
"fiEalap", 
"faE~il", 
"faEolaY", 
"faEalap", 
"fiEAl", 
"faEolAn", 
"fiEAl", 
"faElaY", 
"fuEolAn", 
"faEAlA", 
"faE~", 
"fuEuwl", 
">afoEaY", 
"fuEolAn", 
"fawoEal", 
"fawAEil", 
"fawoEalap", 
"fawAEil", 
"fAEal", 
"fawAEil", 
"fAEilap", 
"fawAEil", 
"faEA}il", 
"fAEuwlap", 
"fawAEiyl", 
"faEAlap", 
"faEA}il", 
"fuEul", 
"fiEAlap", 
"faEA}il", 
"faEalA'", 
"faEAliy", 
"faEolaY", 
"faEAlaY", 
"faEolA'", 
"faEAlaY", 
"faEAlaY", 
"fuEolulap", 
"faEAlil", 
"fiEolilap", 
"faEAlil", 
"faEoliyl", 
"faEAliyl", 
"fiEoliyl", 
"faEAliyl", 
"faEAlilap", 
"faEolaluwl", 
"faEAlil", 
"mafoEil", 
"mafAEil", 
"mafAEiyl", 
"mifoEal", 
"mafAEil", 
"mafoEal", 
"mafAEil", 
"mufoEal", 
"mafAEil", 
"faEolal", 
"fawAEil", 
"fayoEal", 
"fayAEil", 
"fawAEil", 
">afoEal", 
">af~al", 
">afAEil", 
">ufoEul", 
">afAEil", 
"<ifoEal", 
">afAEil", 
">ufoEuwl", 
">afAEiyl", 
"yafoEuwl", 
"yafAEiyl", 
"fiEolAl", 
"faEAliyl", 
"fuEoluwl", 
"faEAliyl", 
"mifoEAl", 
"mafAEiyl", 
"mafoEuwl", 
"mafAEiyl", 
"mafoEiyl", 
"mafAEiyl", 
"tafoEAl", 
"tifoEAl", 
"tafAEiyl", 
"tafoEiyl", 
"tafAEiyl", 
"mafoEilap", 
"mafAEil", 
"mafoEalap", 
"mafoEAp", 
"fiEAlap", 
"faEalAn", 
"fuEAl", 
"faEiyl", 
"fuEolap", 
"<ifoEAl", 
"<iyEAl", 
"tafoEiyl", 
"mufAEalap", 
"faEolalap", 
"AisotifoEAl", 
"AisotiyfAl", 
"tafaE~ul", 
"tafaE~iy", 
"tafaE~", 
"mafoEal", 
"mafoEil", 
"AinofiEAl", 
"faEol", 
"fuEol", 
"fiEol", 
"AifotiEAl", 
"Aif~iEAl", 
"fiEAl", 
"fuEuwl", 
"fuEuwlap", 
"tafAEul", 
"tafAEiy", 
"tafAE", 
"AisotifAlap", 
"faEal", 
"faEAlap", 
"tafoEilap", 
"tafaEolul", 
"AifoEilAl", 
"Ait~iEAl", 
"<ifoEA'", 
"mufAEAp", 
"AinofiEA'", 
"faEolap", 
"AinofiEAlap", 
"faEoy", 
">ifAlap", 
"AifotiEAlap", 
"tafoEiylap", 
"mifoEal", 
"mifal~", 
"mifoEAl", 
"mifoEalap", 
"mafoEalap", 
"faE~Alap", 
"fAEilap", 
"fAEuwl", 
"fAEil", 
"mufaE~il", 
"mufAEil", 
"mufAE~", 
"mufoEil", 
"mufil~", 
"muwfil", 
"mufiyl", 
"mutafaE~il", 
"mutafAEil", 
"mutafAl~", 
"munofaEil", 
"munofal~", 
"mufotaEil", 
"mufotal~", 
"mut~aEil", 
"mufoEal~", 
"musotafoEil", 
"musotafiyl", 
"musotafil~", 
"mufaEolil", 
"mutafaEolil", 
"mufoEalil~", 
"musotafoEiy", 
"mutafaE~iy", 
"mafoEuwl", 
"mufoEAl", 
"mafuwl", 
"mafiyl", 
"mafoEiy", 
"mufaE~al", 
"mufAEal", 
"mufoEal", 
"muf~aEaY", 
"muwfal", 
"mufal~", 
"mufAl", 
"mutafaE~al", 
"mutafAEal", 
"munofaEal", 
"mufotaEal", 
"mufoTaEal", 
"mut~aEal", 
"musotafoEal", 
"musotafAl", 
"musotafal~", 
"mufaEolal", 
"faE~Al", 
"faE~Alap", 
"mifoEAl", 
"faEuwl", 
"faEiyl", 
"faEil", 
"mifoEiyl", 
"fiE~iyl", 
"fAEilap", 
"mufaE~il", 
"fAEuwl", 
">afoEal", 
"faEolAn", 
"faEolA'", 
"faEal", 
"fuEAl", 
"faEAl", 
"faEol", 
"fiEol", 
"fuEol", 
"fuE~", 
"fuEul", 
"faEil", 
"faEiyl", 
"fAEil", 
"faEuwl", 
"fay~il", 
"mufotaEil", 
"mufoTaEil", 
"muf~aEil", 
"mafoEuwl", 
"musotafiyl", 
">afoEal", 
">afaE~", 
"fuEolaY", 
"mafoEal", 
"mafoEil", 
"musotafoEal", 
"mafoEalAn", 
"mafuwlap", 
"mafiylap", 
"mafiyl", 
"faEolAlal", 
"fiyEAl", 
"fiyl", 
"fiyl", 
"fiEalap", 
"fuEoluwAn", 
"fuEolul", 
"mafaE~", 
"mafaE~", 
"mafaE~", 
"faEaluwt", 
"fuEayol", 
"fuEoliyl", 
"fuEoliyl", 
"faEoluwl", 
"faEoluwl", 
"fuEay~il", 
"tafAE~", 
"faEuwlal", 
">ufoEulAn", 
"fuEAlaY", 
"fuE~al", 
"fuE~al", 
"faEolalAn", 
"faEolalAn", 
"AifoEiloEAn", 
"fuEolulAn", 
"fuwlAn", 
"fiEal~", 
"faE~uwl", 
"fuEul~ul", 
"faEal", 
"|l", 
"faEil", 
"faEul", 
"fAl", 
"|l", 
"faEiyl", 
"faEaY", 
"faE~", 
"faEA", 
"faEolal", 
"faE~al", 
"faE~aY", 
"faE~aA", 
"fAEal", 
"fAEaY", 
">afoEal", 
">afaE~", 
"|Eal", 
">afAl", 
">afoEaY", 
"tafaE~al", 
"tafaE~aY", 
"tafAEal", 
"tafAEaY", 
"AinofaEal", 
"AinofAl", 
"AinofaEaY", 
"Ainofal~", 
"AifotaEal", 
"AifoTaEal", 
"AifoEAl", 
"Aif~Eal", 
"AifotAl", 
"Aifotal~", 
"AifotaEaY", 
"Ait~aEal", 
"AifoEal~", 
"AisotafoEal", 
"AisotafoEaY", 
"AisotafAl", 
"Aisotafal~", 
"AifoEawoEal", 
"tafaEolal", 
"AifoEalal~",
"AifotiEAliy~", #Added by Karim
"AifotiEAliy~ap", #Added by Karim
"AifotiEAlAt", #Added by Karim
"AisotifoEAliy~", #Added by Karim
]

def deleteDiacritics(word):
	#return word.translate(None, 'auiFNK~_o')
	return re.sub('[auiFNK~_o]', '', word)
	
def deleteRoot(word):
	return re.sub('[fEl]', '.', word)
	
def getTemplate(word):
	template = u""
	minDistance = 1000
	word_u = deleteDiacritics(word)
	word_u = unicode(word_u)
	for wazn in wazns:
		wazn_u = deleteDiacritics(wazn)
		wazn_u = deleteRoot(wazn_u)
		wazn_u = unicode(wazn_u)
		if len(wazn_u) != len(word_u):
			continue
		
		#print "distance(" + word_u + "," + wazn_u + ")"
		distanceI = distance(word_u, wazn_u)
		if distanceI < minDistance:
			if re.match(wazn_u, word_u):
				minDistance = distanceI
				template = wazn
			continue
		if distanceI == minDistance:
			if re.match(wazn_u, word_u):
				template = template + '+' + wazn
	if not '+' in template:
		return template
	
	#Here, we have a lot of templates, so we will test the diacritics
	templates = template.split('+')
	template = ""
	minDistance = 1000
	word_u = unicode(word)
	for wazn in templates:
		wazn_u = unicode(wazn)
		distanceI = distance(word_u, wazn_u)
		if distanceI < minDistance:
			minDistance = distanceI
			template = wazn
			continue
		if distanceI == minDistance:
			template = template + '+' + wazn
	if not '+' in template:
		template = template + ";"
	return template
	
if __name__ == '__main__':

	# 
	'''theword = "AbotAE"
	theword_u = "AbtAE"
	print distance(theword, "AfotaAEa")
	print getTemplate(theword, theword_u)
	exit()'''
	srcdb = litebase.liteBase(os.path.realpath('../test/ardic.sqlite'))
		
	dstdb = litebase.liteBase(os.path.realpath('../test/words.sqlite'))
	
	tab = litebase.liteTable()
	tab.beginTable("words")
	tab.addColumn('id', litebase.litePK_INT_INC(), u'', False)
	tab.addColumn('word', litebase.liteVARCHAR(20), u'DEFAULT NULL', True)
	tab.addColumn('pattern', litebase.liteVARCHAR(20), u'DEFAULT NULL', True)
	tab.addColumn('vocalized', litebase.liteVARCHAR(20), u'DEFAULT NULL', True)
	tab.endTable()
	# print tab.getSqlQuery()
	
	dstdb.addTable(tab)
	
	src = srcdb.getTable('ardict')
	
	print src.getSqlQuery()
	
	rows = src.getData()
	
	vocalized = src.getColumnIndex('vocal')
	unvocalized = src.getColumnIndex('unvocal')
	i=0
	for row in rows:
		i = i + 1
		print "processing " + row[unvocalized]
		wtranslate = Buckwalter.translaterate(row[vocalized])
		#print deleteDiacritics(deleteRoot(wtranslate))
		wpattern = getTemplate(wtranslate)
		#wpattern_u = Buckwalter.untranslaterate(wpattern)
		#print deleteDiacritics(deleteRoot(wpattern))
		#pattern.getPattern(row[vocalized], row[unvocalized])
		data = u"'%s', '%s', '%s'" % (row[unvocalized], wpattern, row[vocalized])
		print data
		tab.insertData(data, u'word, pattern, vocalized')
		if i == 5000:
			dstdb.commit() 
			i=0
	
	dstdb.commit() 
